digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:LarsCVMethod" "ml:LarsMethod" "ml:HuberRegressorMethod" "ml:OrthogonalMatchingPursuitCVMethod" "ml:MultiTaskLassoMethod" "ml:SGDRegressorMethod" "ml:ARDRegressionMethod" "ml:MultiTaskElasticNetCVMethod" "ml:LassoLarsCVMethod" "ml:LogisticRegressionCVMethod" "ml:PerceptronMethod" "ml:LogisticRegressionMethod" "ml:RidgeClassifierMethod" "ml:SGDClassifierMethod" "ml:LassoLarsICMethod" "ml:PassiveAggressiveClassifierMethod" "ml:GammaRegressorMethod" "ml:RidgeCVMethod" "ml:SGDOneClassSVMMethod" "ml:TheilSenRegressorMethod" "ml:ElasticNetMethod" "ml:TweedieRegressorMethod" "ml:BayesianRidgeMethod" "ml:LassoMethod" "ml:LinearRegressionMethod" "ml:ElasticNetCVMethod" "ml:QuantileRegressorMethod" "ml:RANSACRegressorMethod" "ml:LassoCVMethod" ; /*classes style*/
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCv" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitIntercept" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIsDataValid" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStoreCvValues" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL1Ratio" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEta0" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamJitter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPenalty" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAverage" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStopScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxTrials" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStopNInliers" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNNonzeroCoefs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIterNoChange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxNAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInterceptScaling" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRefit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL1Ratios" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNu" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEpsilon" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambdaInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamC" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCriterion" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEarlyStopping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGcvMode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSolverOptions" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShuffle" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPowerT" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNSubsamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamScoring" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPositive" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasLeastAngleRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCopyX" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasSimpleRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNoiseVariance" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningRate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaPerTarget" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIsModelValid" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambda2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDual" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEps" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBayesianRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLink" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitPath" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPower" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamThresholdLambda" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambda1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamValidationFraction" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPrecompute" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCopy" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSubpopulation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamComputeScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamResidualThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSelection" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMultiClass" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSkips" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamQuantile" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BayesianRegression" -> "ml:ARDRegressionMethod" [ label = "ml:hasBayesianRegressionMethod" ];
	"ml:LassoLarsICMethod" -> "xsd:string" [ label = "ml:hasParamCriterion" ];
	"ml:LogisticRegressionMethod" -> "xsd:float" [ label = "ml:hasParamC" ];
	"ml:RidgeCVMethod" -> "xsd:string" [ label = "ml:hasParamGcvMode" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:float" [ label = "ml:hasParamValidationFraction" ];
	"ml:RANSACRegressorMethod" -> "xsd:int" [ label = "ml:hasParamMaxSkips" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:int" [ label = "ml:hasParamCs" ];
	"ml:RidgeCVMethod" -> "xsd:boolean" [ label = "ml:hasParamAlphaPerTarget" ];
	"ml:TweedieRegressorMethod" -> "xsd:float" [ label = "ml:hasParamPower" ];
	"ml:RANSACRegressorMethod" -> "xsd:float" [ label = "ml:hasParamStopScore" ];
	"ml:QuantileRegressorMethod" -> "xsd:float" [ label = "ml:hasParamQuantile" ];
	"ml:SGDRegressorMethod" -> "xsd:int" [ label = "ml:hasParamAlpha" ];
	"ml:LassoLarsCVMethod" -> "xsd:string" [ label = "ml:hasParamCv" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:string" [ label = "ml:hasParamScoring" ];
	"ml:TweedieRegressorMethod" -> "xsd:string" [ label = "ml:hasParamLink" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamAverage" ];
	"ml:TheilSenRegressorMethod" -> "xsd:int" [ label = "ml:hasParamMaxSubpopulation" ];
	"ml:TheilSenRegressorMethod" -> "xsd:int" [ label = "ml:hasParamNSubsamples" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamEarlyStopping" ];
	"ml:ARDRegressionMethod" -> "xsd:boolean" [ label = "ml:hasParamCopyX" ];
	"ml:LassoLarsICMethod" -> "xsd:float" [ label = "ml:hasParamNoiseVariance" ];
	"ml:LassoCVMethod" -> "xsd:string" [ label = "ml:hasParamPrecompute" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:int" [ label = "ml:hasParamNIterNoChange" ];
	"ml:RANSACRegressorMethod" -> "xsd:string" [ label = "ml:hasParamIsDataValid" ];
	"ml:SGDClassifierMethod" -> "xsd:string" [ label = "ml:hasParamLearningRate" ];
	"ml:PerceptronMethod" -> "xsd:boolean" [ label = "ml:hasParamFitIntercept" ];
	"ml:LarsMethod" -> "xsd:float" [ label = "ml:hasParamJitter" ];
	"ml:MultiTaskElasticNetCVMethod" -> "xsd:int" [ label = "ml:hasParamEps" ];
	"ml:ARDRegressionMethod" -> "xsd:float" [ label = "ml:hasParamAlpha1" ];
	"ml:ARDRegressionMethod" -> "xsd:float" [ label = "ml:hasParamAlpha2" ];
	"ml:RANSACRegressorMethod" -> "xsd:int" [ label = "ml:hasParamStopNInliers" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:string" [ label = "ml:hasParamMultiClass" ];
	"ml:PerceptronMethod" -> "xsd:string" [ label = "ml:hasParamNJobs" ];
	"ml:ARDRegressionMethod" -> "xsd:float" [ label = "ml:hasParamLambda2" ];
	"ml:ARDRegressionMethod" -> "xsd:float" [ label = "ml:hasParamLambda1" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:float" [ label = "ml:hasParamInterceptScaling" ];
	"ml:HuberRegressorMethod" -> "xsd:float" [ label = "ml:hasParamEpsilon" ];
	"ml:ElasticNetMethod" -> "xsd:int" [ label = "ml:hasParamTol" ];
	"ml:QuantileRegressorMethod" -> "xsd:string" [ label = "ml:hasParamSolverOptions" ];
	"ml:ARDRegressionMethod" -> "xsd:int" [ label = "ml:hasParamNIter" ];
	"ml:RegularizedRegression" -> "ml:ElasticNetMethod" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:ARDRegressionMethod" -> "xsd:float" [ label = "ml:hasParamThresholdLambda" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:string" [ label = "ml:hasParamLoss" ];
	"ml:LarsMethod" -> "xsd:boolean" [ label = "ml:hasParamFitPath" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:float" [ label = "ml:hasParamL1Ratios" ];
	"ml:RidgeClassifierMethod" -> "xsd:string" [ label = "ml:hasParamSolver" ];
	"ml:SimpleRegression" -> "ml:LinearRegressionMethod" [ label = "ml:hasSimpleRegressionMethod" ];
	"ml:RANSACRegressorMethod" -> "xsd:string" [ label = "ml:hasParamIsModelValid" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:boolean" [ label = "ml:hasParamRefit" ];
	"ml:SGDRegressorMethod" -> "xsd:float" [ label = "ml:hasParamL1Ratio" ];
	"ml:LarsCVMethod" -> "xsd:int" [ label = "ml:hasParamMaxNAlphas" ];
	"ml:SGDClassifierMethod" -> "xsd:float" [ label = "ml:hasParamPowerT" ];
	"ml:BayesianRidgeMethod" -> "xsd:float" [ label = "ml:hasParamAlphaInit" ];
	"ml:PassiveAggressiveClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamShuffle" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:boolean" [ label = "ml:hasParamDual" ];
	"ml:GammaRegressorMethod" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:BinaryClassification" -> "ml:LogisticRegressionMethod" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:ARDRegressionMethod" -> "xsd:boolean" [ label = "ml:hasParamComputeScore" ];
	"ml:OrthogonalMatchingPursuitCVMethod" -> "xsd:boolean" [ label = "ml:hasParamCopy" ];
	"ml:RidgeCVMethod" -> "xsd:boolean" [ label = "ml:hasParamStoreCvValues" ];
	"ml:SGDOneClassSVMMethod" -> "xsd:float" [ label = "ml:hasParamNu" ];
	"ml:LarsMethod" -> "xsd:int" [ label = "ml:hasParamNNonzeroCoefs" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:RANSACRegressorMethod" -> "xsd:float" [ label = "ml:hasParamResidualThreshold" ];
	"ml:SGDOneClassSVMMethod" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:SGDRegressorMethod" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:BayesianRidgeMethod" -> "xsd:float" [ label = "ml:hasParamLambdaInit" ];
	"ml:ElasticNetCVMethod" -> "xsd:string" [ label = "ml:hasParamAlphas" ];
	"ml:MultiTaskLassoMethod" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:RANSACRegressorMethod" -> "xsd:string" [ label = "ml:hasParamEstimator" ];
	"ml:ElasticNetCVMethod" -> "xsd:string" [ label = "ml:hasParamSelection" ];
	"ml:ElasticNetCVMethod" -> "xsd:int" [ label = "ml:hasParamNAlphas" ];
	"ml:RANSACRegressorMethod" -> "xsd:int" [ label = "ml:hasParamMaxTrials" ];
	"ml:LassoMethod" -> "xsd:boolean" [ label = "ml:hasParamPositive" ];
	"ml:LeastAngleRegression" -> "ml:LarsMethod" [ label = "ml:hasLeastAngleRegressionMethod" ];
	"ml:MulticlassClassification" -> "ml:PerceptronMethod" [ label = "ml:hasMulticlassClassificationMethod" ];
	"ml:PerceptronMethod" -> "xsd:float" [ label = "ml:hasParamEta0" ];
	"ml:LogisticRegressionCVMethod" -> "xsd:string" [ label = "ml:hasParamPenalty" ];

}
