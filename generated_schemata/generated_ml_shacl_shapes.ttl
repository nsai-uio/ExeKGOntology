
:BayesianRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:BayesianRegression ;
    sh:property [
        sh:path ml:hasBayesianRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:ARDRegressionMethod ]
            [ sh:class ml:BayesianRidgeMethod ]
        ) ;
        sh:message "Tasks of type BayesianRegression must be connected with exactly one compatible atomic method." ;
    ] .

:BinaryClassificationTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:BinaryClassification ;
    sh:property [
        sh:path ml:hasBinaryClassificationMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AdaBoostClassifierMethod ]
            [ sh:class ml:BaggingClassifierMethod ]
            [ sh:class ml:BernoulliNBMethod ]
            [ sh:class ml:BernoulliRBMMethod ]
            [ sh:class ml:CategoricalNBMethod ]
            [ sh:class ml:ComplementNBMethod ]
            [ sh:class ml:DecisionTreeClassifierMethod ]
            [ sh:class ml:ExtraTreeClassifierMethod ]
            [ sh:class ml:ExtraTreesClassifierMethod ]
            [ sh:class ml:GaussianNBMethod ]
            [ sh:class ml:GradientBoostingClassifierMethod ]
            [ sh:class ml:HingeMethod ]
            [ sh:class ml:HistGradientBoostingClassifierMethod ]
            [ sh:class ml:KNeighborsClassifierMethod ]
            [ sh:class ml:LinearSVCMethod ]
            [ sh:class ml:LogMethod ]
            [ sh:class ml:LogisticRegressionCVMethod ]
            [ sh:class ml:LogisticRegressionMethod ]
            [ sh:class ml:MLPClassifierMethod ]
            [ sh:class ml:MultinomialNBMethod ]
            [ sh:class ml:NearestCentroidMethod ]
            [ sh:class ml:NuSVCMethod ]
            [ sh:class ml:OneVsOneClassifierMethod ]
            [ sh:class ml:OneVsRestClassifierMethod ]
            [ sh:class ml:OutputCodeClassifierMethod ]
            [ sh:class ml:PassiveAggressiveClassifierMethod ]
            [ sh:class ml:PerceptronMethod ]
            [ sh:class ml:RadiusNeighborsClassifierMethod ]
            [ sh:class ml:RandomForestClassifierMethod ]
            [ sh:class ml:RidgeClassifierCVMethod ]
            [ sh:class ml:RidgeClassifierMethod ]
            [ sh:class ml:SGDClassifierMethod ]
            [ sh:class ml:SVCMethod ]
            [ sh:class ml:StackingClassifierMethod ]
            [ sh:class ml:VotingClassifierMethod ]
        ) ;
        sh:message "Tasks of type BinaryClassification must be connected with exactly one compatible atomic method." ;
    ] .

:BoostingRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:BoostingRegression ;
    sh:property [
        sh:path ml:hasBoostingRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AdaBoostRegressorMethod ]
            [ sh:class ml:GradientBoostingRegressorMethod ]
            [ sh:class ml:HistGradientBoostingRegressorMethod ]
        ) ;
        sh:message "Tasks of type BoostingRegression must be connected with exactly one compatible atomic method." ;
    ] .

:ClusteringTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:Clustering ;
    sh:property [
        sh:path ml:hasClusteringMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AffinityPropagationMethod ]
            [ sh:class ml:AgglomerativeClusteringMethod ]
            [ sh:class ml:BallTreeMethod ]
            [ sh:class ml:BirchMethod ]
            [ sh:class ml:BisectingKMeansMethod ]
            [ sh:class ml:DBSCANMethod ]
            [ sh:class ml:HDBSCANMethod ]
            [ sh:class ml:IsolationForestMethod ]
            [ sh:class ml:KDTreeMethod ]
            [ sh:class ml:KMeansMethod ]
            [ sh:class ml:KNeighborsTransformerMethod ]
            [ sh:class ml:KernelDensityMethod ]
            [ sh:class ml:LocalOutlierFactorMethod ]
            [ sh:class ml:MeanShiftMethod ]
            [ sh:class ml:MiniBatchKMeansMethod ]
            [ sh:class ml:NearestNeighborsMethod ]
            [ sh:class ml:OPTICSMethod ]
            [ sh:class ml:RadiusNeighborsTransformerMethod ]
            [ sh:class ml:SpectralBiclusteringMethod ]
            [ sh:class ml:SpectralClusteringMethod ]
            [ sh:class ml:SpectralCoclusteringMethod ]
        ) ;
        sh:message "Tasks of type Clustering must be connected with exactly one compatible atomic method." ;
    ] .

:ConcatenationTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:Concatenation ;
    sh:property [
        sh:path ml:hasConcatenationMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:ConcatenationMethod ]
        ) ;
        sh:message "Tasks of type Concatenation must be connected with exactly one compatible atomic method." ;
    ] .

:DataProcessingTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:DataProcessing ;
    sh:property [
        sh:path ml:hasDataProcessingMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:BinarizerMethod ]
            [ sh:class ml:DictVectorizerMethod ]
            [ sh:class ml:FeatureHasherMethod ]
            [ sh:class ml:FunctionTransformerMethod ]
            [ sh:class ml:KBinsDiscretizerMethod ]
            [ sh:class ml:KNNImputerMethod ]
            [ sh:class ml:KernelCentererMethod ]
            [ sh:class ml:LabelBinarizerMethod ]
            [ sh:class ml:LabelEncoderMethod ]
            [ sh:class ml:MaxAbsScalerMethod ]
            [ sh:class ml:MinMaxScalerMethod ]
            [ sh:class ml:MissingIndicatorMethod ]
            [ sh:class ml:MultiLabelBinarizerMethod ]
            [ sh:class ml:NormalizerMethod ]
            [ sh:class ml:OneHotEncoderMethod ]
            [ sh:class ml:OrdinalEncoderMethod ]
            [ sh:class ml:PolynomialFeaturesMethod ]
            [ sh:class ml:PowerTransformerMethod ]
            [ sh:class ml:QuantileTransformerMethod ]
            [ sh:class ml:RandomTreesEmbeddingMethod ]
            [ sh:class ml:RobustScalerMethod ]
            [ sh:class ml:SimpleImputerMethod ]
            [ sh:class ml:SplineTransformerMethod ]
            [ sh:class ml:StandardScalerMethod ]
            [ sh:class ml:TargetEncoderMethod ]
        ) ;
        sh:message "Tasks of type DataProcessing must be connected with exactly one compatible atomic method." ;
    ] .

:DataSplittingTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:DataSplitting ;
    sh:property [
        sh:path ml:hasDataSplittingMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:DataSplittingMethod ]
            [ sh:class ml:GroupKFoldMethod ]
            [ sh:class ml:GroupShuffleSplitMethod ]
            [ sh:class ml:KFoldMethod ]
            [ sh:class ml:LearningCurveDisplayMethod ]
            [ sh:class ml:LeaveOneGroupOutMethod ]
            [ sh:class ml:LeaveOneOutMethod ]
            [ sh:class ml:LeavePGroupsOutMethod ]
            [ sh:class ml:LeavePOutMethod ]
            [ sh:class ml:PredefinedSplitMethod ]
            [ sh:class ml:RepeatedKFoldMethod ]
            [ sh:class ml:RepeatedStratifiedKFoldMethod ]
            [ sh:class ml:ShuffleSplitMethod ]
            [ sh:class ml:StratifiedGroupKFoldMethod ]
            [ sh:class ml:StratifiedKFoldMethod ]
            [ sh:class ml:StratifiedShuffleSplitMethod ]
            [ sh:class ml:TimeSeriesSplitMethod ]
            [ sh:class ml:TrainTestSplitMethod ]
            [ sh:class ml:ValidationCurveDisplayMethod ]
        ) ;
        sh:message "Tasks of type DataSplitting must be connected with exactly one compatible atomic method." ;
    ] .

:DecisionTreeRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:DecisionTreeRegression ;
    sh:property [
        sh:path ml:hasDecisionTreeRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:DecisionTreeRegressorMethod ]
            [ sh:class ml:ExtraTreeRegressorMethod ]
        ) ;
        sh:message "Tasks of type DecisionTreeRegression must be connected with exactly one compatible atomic method." ;
    ] .

:DecompositionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:Decomposition ;
    sh:property [
        sh:path ml:hasDecompositionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:DictionaryLearningMethod ]
            [ sh:class ml:FactorAnalysisMethod ]
            [ sh:class ml:FastICAMethod ]
            [ sh:class ml:FeatureAgglomerationMethod ]
            [ sh:class ml:IncrementalPCAMethod ]
            [ sh:class ml:KernelPCAMethod ]
            [ sh:class ml:LatentDirichletAllocationMethod ]
            [ sh:class ml:MiniBatchDictionaryLearningMethod ]
            [ sh:class ml:MiniBatchNMFMethod ]
            [ sh:class ml:MiniBatchSparsePCAMethod ]
            [ sh:class ml:NMFMethod ]
            [ sh:class ml:NeighborhoodComponentsAnalysisMethod ]
            [ sh:class ml:PCAMethod ]
            [ sh:class ml:SparseCoderMethod ]
            [ sh:class ml:SparsePCAMethod ]
            [ sh:class ml:TruncatedSVDMethod ]
        ) ;
        sh:message "Tasks of type Decomposition must be connected with exactly one compatible atomic method." ;
    ] .

:FeatureSelectionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:FeatureSelection ;
    sh:property [
        sh:path ml:hasFeatureSelectionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:Chi2Method ]
            [ sh:class ml:FClassifMethod ]
            [ sh:class ml:FRegressionMethod ]
            [ sh:class ml:GenericUnivariateSelectMethod ]
            [ sh:class ml:MutualInfoClassifMethod ]
            [ sh:class ml:MutualInfoRegressionMethod ]
            [ sh:class ml:RFECVMethod ]
            [ sh:class ml:RFEMethod ]
            [ sh:class ml:SelectFdrMethod ]
            [ sh:class ml:SelectFprMethod ]
            [ sh:class ml:SelectFromModelMethod ]
            [ sh:class ml:SelectFweMethod ]
            [ sh:class ml:SelectKBestMethod ]
            [ sh:class ml:SelectPercentileMethod ]
            [ sh:class ml:SequentialFeatureSelectorMethod ]
            [ sh:class ml:VarianceThresholdMethod ]
        ) ;
        sh:message "Tasks of type FeatureSelection must be connected with exactly one compatible atomic method." ;
    ] .

:InstanceBasedRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:InstanceBasedRegression ;
    sh:property [
        sh:path ml:hasInstanceBasedRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:KNeighborsRegressorMethod ]
            [ sh:class ml:RadiusNeighborsRegressorMethod ]
        ) ;
        sh:message "Tasks of type InstanceBasedRegression must be connected with exactly one compatible atomic method." ;
    ] .

:LeastAngleRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:LeastAngleRegression ;
    sh:property [
        sh:path ml:hasLeastAngleRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:LarsMethod ]
            [ sh:class ml:LassoLarsMethod ]
        ) ;
        sh:message "Tasks of type LeastAngleRegression must be connected with exactly one compatible atomic method." ;
    ] .

:ModelSelectionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:ModelSelection ;
    sh:property [
        sh:path ml:hasModelSelectionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:GridSearchCVMethod ]
            [ sh:class ml:HalvingGridSearchCVMethod ]
            [ sh:class ml:HalvingRandomSearchCVMethod ]
            [ sh:class ml:RandomizedSearchCVMethod ]
        ) ;
        sh:message "Tasks of type ModelSelection must be connected with exactly one compatible atomic method." ;
    ] .

:MulticlassClassificationTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:MulticlassClassification ;
    sh:property [
        sh:path ml:hasMulticlassClassificationMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AdaBoostClassifierMethod ]
            [ sh:class ml:BaggingClassifierMethod ]
            [ sh:class ml:BernoulliNBMethod ]
            [ sh:class ml:DecisionTreeClassifierMethod ]
            [ sh:class ml:ExtraTreeClassifierMethod ]
            [ sh:class ml:ExtraTreesClassifierMethod ]
            [ sh:class ml:GaussianNBMethod ]
            [ sh:class ml:GradientBoostingClassifierMethod ]
            [ sh:class ml:HistGradientBoostingClassifierMethod ]
            [ sh:class ml:KNeighborsClassifierMethod ]
            [ sh:class ml:LinearSVCMethod ]
            [ sh:class ml:LogisticRegressionCVMethod ]
            [ sh:class ml:LogisticRegressionMethod ]
            [ sh:class ml:MLPClassifierMethod ]
            [ sh:class ml:MultinomialNBMethod ]
            [ sh:class ml:NearestCentroidMethod ]
            [ sh:class ml:NuSVCMethod ]
            [ sh:class ml:OneVsOneClassifierMethod ]
            [ sh:class ml:OneVsRestClassifierMethod ]
            [ sh:class ml:OutputCodeClassifierMethod ]
            [ sh:class ml:PassiveAggressiveClassifierMethod ]
            [ sh:class ml:PerceptronMethod ]
            [ sh:class ml:RadiusNeighborsClassifierMethod ]
            [ sh:class ml:RandomForestClassifierMethod ]
            [ sh:class ml:RidgeClassifierCVMethod ]
            [ sh:class ml:RidgeClassifierMethod ]
            [ sh:class ml:SGDClassifierMethod ]
            [ sh:class ml:SVCMethod ]
        ) ;
        sh:message "Tasks of type MulticlassClassification must be connected with exactly one compatible atomic method." ;
    ] .

:MultilabelClassificationTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:MultilabelClassification ;
    sh:property [
        sh:path ml:hasMultilabelClassificationMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AdaBoostClassifierMethod ]
            [ sh:class ml:BaggingClassifierMethod ]
            [ sh:class ml:DecisionTreeClassifierMethod ]
            [ sh:class ml:ExtraTreeClassifierMethod ]
            [ sh:class ml:ExtraTreesClassifierMethod ]
            [ sh:class ml:GradientBoostingClassifierMethod ]
            [ sh:class ml:HistGradientBoostingClassifierMethod ]
            [ sh:class ml:KNeighborsClassifierMethod ]
            [ sh:class ml:OneVsOneClassifierMethod ]
            [ sh:class ml:OneVsRestClassifierMethod ]
            [ sh:class ml:OutputCodeClassifierMethod ]
            [ sh:class ml:RadiusNeighborsClassifierMethod ]
            [ sh:class ml:RandomForestClassifierMethod ]
        ) ;
        sh:message "Tasks of type MultilabelClassification must be connected with exactly one compatible atomic method." ;
    ] .

:PerformanceCalculationTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:PerformanceCalculation ;
    sh:property [
        sh:path ml:hasPerformanceCalculationMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:AccuracyScoreMethod ]
            [ sh:class ml:AdjustedMutualInfoScoreMethod ]
            [ sh:class ml:AdjustedRandScoreMethod ]
            [ sh:class ml:AucMethod ]
            [ sh:class ml:AveragePrecisionScoreMethod ]
            [ sh:class ml:BalancedAccuracyScoreMethod ]
            [ sh:class ml:BrierScoreLossMethod ]
            [ sh:class ml:CalinskiHarabaszScoreMethod ]
            [ sh:class ml:CheckScoringMethod ]
            [ sh:class ml:ClassLikelihoodRatiosMethod ]
            [ sh:class ml:ClassificationReportMethod ]
            [ sh:class ml:CohenKappaScoreMethod ]
            [ sh:class ml:CompletenessScoreMethod ]
            [ sh:class ml:ConfusionMatrixMethod ]
            [ sh:class ml:ConsensusScoreMethod ]
            [ sh:class ml:CoverageErrorMethod ]
            [ sh:class ml:D2AbsoluteErrorScoreMethod ]
            [ sh:class ml:D2PinballScoreMethod ]
            [ sh:class ml:D2TweedieScoreMethod ]
            [ sh:class ml:DaviesBouldinScoreMethod ]
            [ sh:class ml:DcgScoreMethod ]
            [ sh:class ml:DetCurveMethod ]
            [ sh:class ml:EuclideanDistancesMethod ]
            [ sh:class ml:ExplainedVarianceScoreMethod ]
            [ sh:class ml:F1ScoreMethod ]
            [ sh:class ml:FbetaScoreMethod ]
            [ sh:class ml:FowlkesMallowsScoreMethod ]
            [ sh:class ml:GetScorerMethod ]
            [ sh:class ml:GetScorerNamesMethod ]
            [ sh:class ml:HammingLossMethod ]
            [ sh:class ml:HingeLossMethod ]
            [ sh:class ml:HomogeneityCompletenessVMeasureMethod ]
            [ sh:class ml:HomogeneityScoreMethod ]
            [ sh:class ml:JaccardScoreMethod ]
            [ sh:class ml:LabelRankingAveragePrecisionScoreMethod ]
            [ sh:class ml:LabelRankingLossMethod ]
            [ sh:class ml:LogLossMethod ]
            [ sh:class ml:MakeScorerMethod ]
            [ sh:class ml:MatthewsCorrcoefMethod ]
            [ sh:class ml:MaxErrorMethod ]
            [ sh:class ml:MeanAbsoluteErrorMethod ]
            [ sh:class ml:MeanAbsolutePercentageErrorMethod ]
            [ sh:class ml:MeanGammaDevianceMethod ]
            [ sh:class ml:MeanPinballLossMethod ]
            [ sh:class ml:MeanPoissonDevianceMethod ]
            [ sh:class ml:MeanSquaredErrorMethod ]
            [ sh:class ml:MeanSquaredLogErrorMethod ]
            [ sh:class ml:MeanTweedieDevianceMethod ]
            [ sh:class ml:MedianAbsoluteErrorMethod ]
            [ sh:class ml:MultilabelConfusionMatrixMethod ]
            [ sh:class ml:MutualInfoScoreMethod ]
            [ sh:class ml:NanEuclideanDistancesMethod ]
            [ sh:class ml:NdcgScoreMethod ]
            [ sh:class ml:NormalizedMutualInfoScoreMethod ]
            [ sh:class ml:PairConfusionMatrixMethod ]
            [ sh:class ml:PairwiseDistancesArgminMethod ]
            [ sh:class ml:PairwiseDistancesArgminMinMethod ]
            [ sh:class ml:PairwiseDistancesChunkedMethod ]
            [ sh:class ml:PairwiseDistancesMethod ]
            [ sh:class ml:PairwiseKernelsMethod ]
            [ sh:class ml:PerformanceCalculationMethod ]
            [ sh:class ml:PrecisionRecallCurveMethod ]
            [ sh:class ml:PrecisionRecallFscoreSupportMethod ]
            [ sh:class ml:PrecisionScoreMethod ]
            [ sh:class ml:R2ScoreMethod ]
            [ sh:class ml:RandScoreMethod ]
            [ sh:class ml:RecallScoreMethod ]
            [ sh:class ml:RocAucScoreMethod ]
            [ sh:class ml:RocCurveMethod ]
            [ sh:class ml:RootMeanSquaredErrorMethod ]
            [ sh:class ml:RootMeanSquaredLogErrorMethod ]
            [ sh:class ml:SilhouetteSamplesMethod ]
            [ sh:class ml:SilhouetteScoreMethod ]
            [ sh:class ml:TopKAccuracyScoreMethod ]
            [ sh:class ml:VMeasureScoreMethod ]
            [ sh:class ml:ZeroOneLossMethod ]
        ) ;
        sh:message "Tasks of type PerformanceCalculation must be connected with exactly one compatible atomic method." ;
    ] .

:RandomForestRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:RandomForestRegression ;
    sh:property [
        sh:path ml:hasRandomForestRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:ExtraTreesRegressorMethod ]
            [ sh:class ml:RandomForestRegressorMethod ]
        ) ;
        sh:message "Tasks of type RandomForestRegression must be connected with exactly one compatible atomic method." ;
    ] .

:RegularizedRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:RegularizedRegression ;
    sh:property [
        sh:path ml:hasRegularizedRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:BaggingRegressorMethod ]
            [ sh:class ml:ElasticNetCVMethod ]
            [ sh:class ml:ElasticNetMethod ]
            [ sh:class ml:GammaRegressorMethod ]
            [ sh:class ml:HuberMethod ]
            [ sh:class ml:HuberRegressorMethod ]
            [ sh:class ml:LarsCVMethod ]
            [ sh:class ml:LassoCVMethod ]
            [ sh:class ml:LassoLarsCVMethod ]
            [ sh:class ml:LassoLarsICMethod ]
            [ sh:class ml:LassoMethod ]
            [ sh:class ml:MLPRegressorMethod ]
            [ sh:class ml:ModifiedHuberMethod ]
            [ sh:class ml:MultiTaskElasticNetCVMethod ]
            [ sh:class ml:MultiTaskElasticNetMethod ]
            [ sh:class ml:MultiTaskLassoCVMethod ]
            [ sh:class ml:MultiTaskLassoMethod ]
            [ sh:class ml:OneClassSVMMethod ]
            [ sh:class ml:OrthogonalMatchingPursuitCVMethod ]
            [ sh:class ml:OrthogonalMatchingPursuitMethod ]
            [ sh:class ml:PassiveAggressiveRegressorMethod ]
            [ sh:class ml:PoissonRegressorMethod ]
            [ sh:class ml:QuantileRegressorMethod ]
            [ sh:class ml:RANSACRegressorMethod ]
            [ sh:class ml:RidgeCVMethod ]
            [ sh:class ml:RidgeMethod ]
            [ sh:class ml:SGDOneClassSVMMethod ]
            [ sh:class ml:SGDRegressorMethod ]
            [ sh:class ml:SquaredLossMethod ]
            [ sh:class ml:StackingRegressorMethod ]
            [ sh:class ml:TheilSenRegressorMethod ]
            [ sh:class ml:TweedieRegressorMethod ]
            [ sh:class ml:VotingRegressorMethod ]
        ) ;
        sh:message "Tasks of type RegularizedRegression must be connected with exactly one compatible atomic method." ;
    ] .

:SimpleRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:SimpleRegression ;
    sh:property [
        sh:path ml:hasSimpleRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:LinearRegressionMethod ]
        ) ;
        sh:message "Tasks of type SimpleRegression must be connected with exactly one compatible atomic method." ;
    ] .

:SupportVectorRegressionTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:SupportVectorRegression ;
    sh:property [
        sh:path ml:hasSupportVectorRegressionMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:LinearSVRMethod ]
            [ sh:class ml:NuSVRMethod ]
            [ sh:class ml:SVRMethod ]
        ) ;
        sh:message "Tasks of type SupportVectorRegression must be connected with exactly one compatible atomic method." ;
    ] .

:TestTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:Test ;
    sh:property [
        sh:path ml:hasTestMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:TestMethod ]
        ) ;
        sh:message "Tasks of type Test must be connected with exactly one compatible atomic method." ;
    ] .

:TransformTaskMethodShape a sh:NodeShape ;
    sh:targetClass ml:Transform ;
    sh:property [
        sh:path ml:hasTransformMethod ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:class ml:TransformMethod ]
        ) ;
        sh:message "Tasks of type Transform must be connected with exactly one compatible atomic method." ;
    ] .

:ConsensusScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ConsensusScoreMethod ;

    sh:property [
        sh:path ml:hasParamA ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ConsensusScoreMethod must have at most one compatible value for parameter hasParamA." ;
    ] ;
    sh:property [
        sh:path ml:hasParamB ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ConsensusScoreMethod must have at most one compatible value for parameter hasParamB." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSimilarity ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ConsensusScoreMethod must have at most one compatible value for parameter hasParamSimilarity." ;
    ] .

:FunctionTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FunctionTransformerMethod ;

    sh:property [
        sh:path ml:hasParamAcceptSparse ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamAcceptSparse." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCheckInverse ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamCheckInverse." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFeatureNamesOut ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamFeatureNamesOut." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamFunc." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInvKwArgs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamInvKwArgs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInverseFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamInverseFunc." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKwArgs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamKwArgs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FunctionTransformerMethod must have at most one compatible value for parameter hasParamValidate." ;
    ] .

:MLPClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MLPClassifierMethod ;

    sh:property [
        sh:path ml:hasParamActivation ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamActivation." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamBeta1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamBeta2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRateInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamLearningRateInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFun ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamMaxFun." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMomentum ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamMomentum." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNesterovsMomentum ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamNesterovsMomentum." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerT ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamPowerT." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:MLPRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MLPRegressorMethod ;

    sh:property [
        sh:path ml:hasParamActivation ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamActivation." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamBeta1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamBeta2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRateInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamLearningRateInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFun ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamMaxFun." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMomentum ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamMomentum." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNesterovsMomentum ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamNesterovsMomentum." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerT ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamPowerT." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MLPRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:KNNImputerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KNNImputerMethod ;

    sh:property [
        sh:path ml:hasParamAddIndicator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamAddIndicator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKeepEmptyFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamKeepEmptyFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMissingValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamMissingValues." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNNImputerMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .

:SimpleImputerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SimpleImputerMethod ;

    sh:property [
        sh:path ml:hasParamAddIndicator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamAddIndicator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFillValue ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamFillValue." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKeepEmptyFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamKeepEmptyFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMissingValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamMissingValues." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStrategy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SimpleImputerMethod must have at most one compatible value for parameter hasParamStrategy." ;
    ] .

:BalancedAccuracyScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BalancedAccuracyScoreMethod ;

    sh:property [
        sh:path ml:hasParamAdjusted ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BalancedAccuracyScoreMethod must have at most one compatible value for parameter hasParamAdjusted." ;
    ] .

:AffinityPropagationMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AffinityPropagationMethod ;

    sh:property [
        sh:path ml:hasParamAffinity ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamAffinity." ;
    ] ;
    sh:property [
        sh:path ml:hasParamConvergenceIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamConvergenceIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDamping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamDamping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPreference ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamPreference." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AffinityPropagationMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:SpectralClusteringMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SpectralClusteringMethod ;

    sh:property [
        sh:path ml:hasParamAffinity ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamAffinity." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAssignLabels ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamAssignLabels." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEigenSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamEigenSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEigenTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamEigenTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernelParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamKernelParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralClusteringMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:HalvingGridSearchCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HalvingGridSearchCVMethod ;

    sh:property [
        sh:path ml:hasParamAggressiveElimination ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamAggressiveElimination." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamErrorScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamErrorScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFactor ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamFactor." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxResources ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamMaxResources." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinResources ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamMinResources." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamParamGrid ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamParamGrid." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamRefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamResource ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamResource." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReturnTrainScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamReturnTrainScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingGridSearchCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:HalvingRandomSearchCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HalvingRandomSearchCVMethod ;

    sh:property [
        sh:path ml:hasParamAggressiveElimination ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamAggressiveElimination." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamErrorScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamErrorScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFactor ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamFactor." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxResources ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamMaxResources." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinResources ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamMinResources." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNCandidates ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamNCandidates." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamParamDistributions ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamParamDistributions." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamRefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamResource ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamResource." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReturnTrainScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamReturnTrainScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HalvingRandomSearchCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:AdaBoostClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AdaBoostClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostClassifierMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostClassifierMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostClassifierMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AdaBoostClassifierMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:BisectingKMeansMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BisectingKMeansMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBisectingStrategy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamBisectingStrategy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BisectingKMeansMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:DBSCANMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DBSCANMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamMinSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DBSCANMethod must have at most one compatible value for parameter hasParamP." ;
    ] .

:FastICAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FastICAMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFun ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamFun." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFunArgs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamFunArgs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamWInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWhiten ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamWhiten." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWhitenSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FastICAMethod must have at most one compatible value for parameter hasParamWhitenSolver." ;
    ] .

:HDBSCANMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HDBSCANMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAllowSingleCluster ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamAllowSingleCluster." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClusterSelectionEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamClusterSelectionEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClusterSelectionMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamClusterSelectionMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxClusterSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamMaxClusterSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinClusterSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamMinClusterSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamMinSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStoreCenters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HDBSCANMethod must have at most one compatible value for parameter hasParamStoreCenters." ;
    ] .

:KMeansMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KMeansMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KMeansMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:KNeighborsClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KNeighborsClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsClassifierMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .

:KNeighborsRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KNeighborsRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsRegressorMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .

:KNeighborsTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KNeighborsTransformerMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KNeighborsTransformerMethod must have at most one compatible value for parameter hasParamP." ;
    ] .

:KernelDensityMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KernelDensityMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAtol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamAtol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBandwidth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamBandwidth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBreadthFirst ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamBreadthFirst." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRtol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KernelDensityMethod must have at most one compatible value for parameter hasParamRtol." ;
    ] .

:LocalOutlierFactorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LocalOutlierFactorMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamContamination ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamContamination." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNovelty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamNovelty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LocalOutlierFactorMethod must have at most one compatible value for parameter hasParamP." ;
    ] .

:NearestNeighborsMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NearestNeighborsMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRadius ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NearestNeighborsMethod must have at most one compatible value for parameter hasParamRadius." ;
    ] .

:OPTICSMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OPTICSMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClusterMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamClusterMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamMaxEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMemory ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamMemory." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPredecessorCorrection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OPTICSMethod must have at most one compatible value for parameter hasParamPredecessorCorrection." ;
    ] .

:RadiusNeighborsClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RadiusNeighborsClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOutlierLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamOutlierLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRadius ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamRadius." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsClassifierMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .

:RadiusNeighborsRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RadiusNeighborsRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRadius ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamRadius." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsRegressorMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .

:RadiusNeighborsTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RadiusNeighborsTransformerMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLeafSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamLeafSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMetricParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamMode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamP." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRadius ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RadiusNeighborsTransformerMethod must have at most one compatible value for parameter hasParamRadius." ;
    ] .

:TruncatedSVDMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TruncatedSVDMethod ;

    sh:property [
        sh:path ml:hasParamAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamNIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNOversamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamNOversamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerIterationNormalizer ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamPowerIterationNormalizer." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TruncatedSVDMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:CheckScoringMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:CheckScoringMethod ;

    sh:property [
        sh:path ml:hasParamAllowNone ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method CheckScoringMethod must have at most one compatible value for parameter hasParamAllowNone." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method CheckScoringMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] .

:BernoulliNBMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BernoulliNBMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BernoulliNBMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBinarize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BernoulliNBMethod must have at most one compatible value for parameter hasParamBinarize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BernoulliNBMethod must have at most one compatible value for parameter hasParamFitPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForceAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BernoulliNBMethod must have at most one compatible value for parameter hasParamForceAlpha." ;
    ] .

:CategoricalNBMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:CategoricalNBMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method CategoricalNBMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method CategoricalNBMethod must have at most one compatible value for parameter hasParamFitPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForceAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method CategoricalNBMethod must have at most one compatible value for parameter hasParamForceAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method CategoricalNBMethod must have at most one compatible value for parameter hasParamMinCategories." ;
    ] .

:ComplementNBMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ComplementNBMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ComplementNBMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ComplementNBMethod must have at most one compatible value for parameter hasParamFitPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForceAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ComplementNBMethod must have at most one compatible value for parameter hasParamForceAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNorm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ComplementNBMethod must have at most one compatible value for parameter hasParamNorm." ;
    ] .

:D2PinballScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:D2PinballScoreMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method D2PinballScoreMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method D2PinballScoreMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:DictionaryLearningMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DictionaryLearningMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCallback ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamCallback." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCodeInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamCodeInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDictInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamDictInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamFitAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositiveCode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamPositiveCode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositiveDict ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamPositiveDict." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitSign ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamSplitSign." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformNNonzeroCoefs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformNNonzeroCoefs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DictionaryLearningMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:ElasticNetMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ElasticNetMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:GammaRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GammaRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method GammaRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:GradientBoostingRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GradientBoostingRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSubsample ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamSubsample." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method GradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:HuberRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HuberRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HuberRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:KernelPCAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KernelPCAMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEigenSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamEigenSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitInverseTransform ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamFitInverseTransform." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernelParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamKernelParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRemoveZeroEig ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamRemoveZeroEig." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KernelPCAMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:LassoLarsMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LassoLarsMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPath ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamFitPath." ;
    ] ;
    sh:property [
        sh:path ml:hasParamJitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamJitter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LassoMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LassoMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:MeanPinballLossMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanPinballLossMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanPinballLossMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanPinballLossMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:MiniBatchDictionaryLearningMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MiniBatchDictionaryLearningMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCallback ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamCallback." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDictInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamDictInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamFitAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNoImprovement ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamMaxNoImprovement." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositiveCode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamPositiveCode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositiveDict ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamPositiveDict." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitSign ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamSplitSign." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformNNonzeroCoefs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamTransformNNonzeroCoefs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchDictionaryLearningMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MiniBatchSparsePCAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MiniBatchSparsePCAMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCallback ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamCallback." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNoImprovement ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamMaxNoImprovement." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRidgeAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamRidgeAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchSparsePCAMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MultiTaskElasticNetMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultiTaskElasticNetMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskElasticNetMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:MultiTaskLassoMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultiTaskLassoMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskLassoMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:MultinomialNBMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultinomialNBMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultinomialNBMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultinomialNBMethod must have at most one compatible value for parameter hasParamFitPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForceAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultinomialNBMethod must have at most one compatible value for parameter hasParamForceAlpha." ;
    ] .

:PerceptronMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PerceptronMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEta0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamEta0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PerceptronMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:PoissonRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PoissonRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PoissonRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:QuantileRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:QuantileRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method QuantileRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamQuantile ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method QuantileRegressorMethod must have at most one compatible value for parameter hasParamQuantile." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileRegressorMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolverOptions ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileRegressorMethod must have at most one compatible value for parameter hasParamSolverOptions." ;
    ] .

:RidgeClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RidgeClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:RidgeMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RidgeMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:SGDClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SGDClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEta0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamEta0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerT ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamPowerT." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:SGDRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SGDRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEta0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamEta0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerT ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamPowerT." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:SelectFdrMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectFdrMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFdrMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFdrMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:SelectFprMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectFprMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFprMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFprMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:SelectFweMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectFweMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFweMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFweMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:SparsePCAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SparsePCAMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRidgeAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamRidgeAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamUInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamUInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamVInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparsePCAMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:TweedieRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TweedieRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLink ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamLink." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPower ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamPower." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TweedieRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:ARDRegressionMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ARDRegressionMethod ;

    sh:property [
        sh:path ml:hasParamAlpha1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamAlpha1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlpha2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamAlpha2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamComputeScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLambda1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamLambda1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLambda2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamLambda2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamNIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamThresholdLambda ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamThresholdLambda." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ARDRegressionMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:BayesianRidgeMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BayesianRidgeMethod ;

    sh:property [
        sh:path ml:hasParamAlpha1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamAlpha1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlpha2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamAlpha2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlphaInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamAlphaInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamComputeScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLambda1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamLambda1." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLambda2 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamLambda2." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLambdaInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamLambdaInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamNIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BayesianRidgeMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MiniBatchNMFMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MiniBatchNMFMethod ;

    sh:property [
        sh:path ml:hasParamAlphaH ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamAlphaH." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlphaW ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamAlphaW." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBetaLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamBetaLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForgetFactor ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamForgetFactor." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFreshRestarts ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamFreshRestarts." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFreshRestartsMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamFreshRestartsMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNoImprovement ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamMaxNoImprovement." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamTransformMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchNMFMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:NMFMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NMFMethod ;

    sh:property [
        sh:path ml:hasParamAlphaH ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamAlphaH." ;
    ] ;
    sh:property [
        sh:path ml:hasParamAlphaW ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamAlphaW." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBetaLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamBetaLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NMFMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:RidgeCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RidgeCVMethod ;

    sh:property [
        sh:path ml:hasParamAlphaPerTarget ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamAlphaPerTarget." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGcvMode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamGcvMode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStoreCvValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeCVMethod must have at most one compatible value for parameter hasParamStoreCvValues." ;
    ] .

:ElasticNetCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ElasticNetCVMethod ;

    sh:property [
        sh:path ml:hasParamAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ElasticNetCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LassoCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LassoCVMethod ;

    sh:property [
        sh:path ml:hasParamAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MultiTaskElasticNetCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultiTaskElasticNetCVMethod ;

    sh:property [
        sh:path ml:hasParamAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskElasticNetCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MultiTaskLassoCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultiTaskLassoCVMethod ;

    sh:property [
        sh:path ml:hasParamAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSelection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamSelection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MultiTaskLassoCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:FeatureHasherMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FeatureHasherMethod ;

    sh:property [
        sh:path ml:hasParamAlternateSign ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FeatureHasherMethod must have at most one compatible value for parameter hasParamAlternateSign." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDtype ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureHasherMethod must have at most one compatible value for parameter hasParamDtype." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInputType ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureHasherMethod must have at most one compatible value for parameter hasParamInputType." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FeatureHasherMethod must have at most one compatible value for parameter hasParamNFeatures." ;
    ] .

:AveragePrecisionScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AveragePrecisionScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AveragePrecisionScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AveragePrecisionScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] .

:F1ScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:F1ScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method F1ScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method F1ScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method F1ScoreMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:FbetaScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FbetaScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FbetaScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FbetaScoreMethod must have at most one compatible value for parameter hasParamBeta." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FbetaScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FbetaScoreMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:JaccardScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:JaccardScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method JaccardScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method JaccardScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method JaccardScoreMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:PassiveAggressiveClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PassiveAggressiveClassifierMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:PassiveAggressiveRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PassiveAggressiveRegressorMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PassiveAggressiveRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:PrecisionRecallFscoreSupportMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PrecisionRecallFscoreSupportMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionRecallFscoreSupportMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBeta ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PrecisionRecallFscoreSupportMethod must have at most one compatible value for parameter hasParamBeta." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionRecallFscoreSupportMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarnFor ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionRecallFscoreSupportMethod must have at most one compatible value for parameter hasParamWarnFor." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionRecallFscoreSupportMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:PrecisionScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PrecisionScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionScoreMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:RecallScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RecallScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RecallScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RecallScoreMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RecallScoreMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:RocAucScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RocAucScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RocAucScoreMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultiClass ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RocAucScoreMethod must have at most one compatible value for parameter hasParamMultiClass." ;
    ] .

:SGDOneClassSVMMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SGDOneClassSVMMethod ;

    sh:property [
        sh:path ml:hasParamAverage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamAverage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEta0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamEta0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNu ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamNu." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerT ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamPowerT." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SGDOneClassSVMMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:AdjustedMutualInfoScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AdjustedMutualInfoScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverageMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdjustedMutualInfoScoreMethod must have at most one compatible value for parameter hasParamAverageMethod." ;
    ] .

:NormalizedMutualInfoScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NormalizedMutualInfoScoreMethod ;

    sh:property [
        sh:path ml:hasParamAverageMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NormalizedMutualInfoScoreMethod must have at most one compatible value for parameter hasParamAverageMethod." ;
    ] .

:PairwiseDistancesArgminMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PairwiseDistancesArgminMethod ;

    sh:property [
        sh:path ml:hasParamAxis ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMethod must have at most one compatible value for parameter hasParamAxis." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricKwargs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMethod must have at most one compatible value for parameter hasParamMetricKwargs." ;
    ] .

:PairwiseDistancesArgminMinMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PairwiseDistancesArgminMinMethod ;

    sh:property [
        sh:path ml:hasParamAxis ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMinMethod must have at most one compatible value for parameter hasParamAxis." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMinMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetricKwargs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesArgminMinMethod must have at most one compatible value for parameter hasParamMetricKwargs." ;
    ] .

:MeanShiftMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanShiftMethod ;

    sh:property [
        sh:path ml:hasParamBandwidth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamBandwidth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBinSeeding ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamBinSeeding." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClusterAll ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamClusterAll." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinBinFreq ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamMinBinFreq." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSeeds ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanShiftMethod must have at most one compatible value for parameter hasParamSeeds." ;
    ] .

:BernoulliRBMMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BernoulliRBMMethod ;

    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamNIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BernoulliRBMMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:IncrementalPCAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:IncrementalPCAMethod ;

    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method IncrementalPCAMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method IncrementalPCAMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method IncrementalPCAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWhiten ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method IncrementalPCAMethod must have at most one compatible value for parameter hasParamWhiten." ;
    ] .

:LatentDirichletAllocationMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LatentDirichletAllocationMethod ;

    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDocTopicPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamDocTopicPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEvaluateEvery ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamEvaluateEvery." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningDecay ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamLearningDecay." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamLearningMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningOffset ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamLearningOffset." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDocUpdateIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamMaxDocUpdateIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMeanChangeTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamMeanChangeTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPerpTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamPerpTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTopicWordPrior ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamTopicWordPrior." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTotalSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamTotalSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LatentDirichletAllocationMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:MiniBatchKMeansMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MiniBatchKMeansMethod ;

    sh:property [
        sh:path ml:hasParamBatchSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamBatchSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeLabels ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamComputeLabels." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInitSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamInitSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNoImprovement ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamMaxNoImprovement." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReassignmentRatio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamReassignmentRatio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MiniBatchKMeansMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:HomogeneityCompletenessVMeasureMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HomogeneityCompletenessVMeasureMethod ;

    sh:property [
        sh:path ml:hasParamBeta ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HomogeneityCompletenessVMeasureMethod must have at most one compatible value for parameter hasParamBeta." ;
    ] .

:VMeasureScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:VMeasureScoreMethod ;

    sh:property [
        sh:path ml:hasParamBeta ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method VMeasureScoreMethod must have at most one compatible value for parameter hasParamBeta." ;
    ] .

:BaggingClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BaggingClassifierMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBootstrapFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamBootstrapFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:BaggingRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BaggingRegressorMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamBootstrapFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamBootstrapFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BaggingRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:ExtraTreesClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ExtraTreesClassifierMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ExtraTreesClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:ExtraTreesRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ExtraTreesRegressorMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ExtraTreesRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:IsolationForestMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:IsolationForestMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamContamination ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamContamination." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method IsolationForestMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:RandomForestClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RandomForestClassifierMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomForestClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:RandomForestRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RandomForestRegressorMethod ;

    sh:property [
        sh:path ml:hasParamBootstrap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamBootstrap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMaxSamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOobScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamOobScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomForestRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:BirchMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BirchMethod ;

    sh:property [
        sh:path ml:hasParamBranchingFactor ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method BirchMethod must have at most one compatible value for parameter hasParamBranchingFactor." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeLabels ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BirchMethod must have at most one compatible value for parameter hasParamComputeLabels." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BirchMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BirchMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BirchMethod must have at most one compatible value for parameter hasParamThreshold." ;
    ] .

:NuSVCMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NuSVCMethod ;

    sh:property [
        sh:path ml:hasParamBreakTies ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamBreakTies." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCacheSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamCacheSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDecisionFunctionShape ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamDecisionFunctionShape." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNu ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamNu." ;
    ] ;
    sh:property [
        sh:path ml:hasParamProbability ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamProbability." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinking ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamShrinking." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVCMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:SVCMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SVCMethod ;

    sh:property [
        sh:path ml:hasParamBreakTies ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamBreakTies." ;
    ] ;
    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCacheSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamCacheSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDecisionFunctionShape ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamDecisionFunctionShape." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamProbability ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamProbability." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinking ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamShrinking." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVCMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LinearSVCMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LinearSVCMethod ;

    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDual ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamDual." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInterceptScaling ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamInterceptScaling." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultiClass ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamMultiClass." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVCMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LinearSVRMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LinearSVRMethod ;

    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDual ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamDual." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInterceptScaling ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamInterceptScaling." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LinearSVRMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LogisticRegressionMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LogisticRegressionMethod ;

    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDual ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamDual." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInterceptScaling ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamInterceptScaling." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratio ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamL1Ratio." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultiClass ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamMultiClass." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LogisticRegressionMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:NuSVRMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NuSVRMethod ;

    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCacheSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamCacheSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNu ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamNu." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinking ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamShrinking." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NuSVRMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:SVRMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SVRMethod ;

    sh:property [
        sh:path ml:hasParamC ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamC." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCacheSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamCacheSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEpsilon ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamEpsilon." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinking ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamShrinking." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SVRMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:OneClassSVMMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OneClassSVMMethod ;

    sh:property [
        sh:path ml:hasParamCacheSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamCacheSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCoef0 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamCoef0." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamGamma ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamGamma." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKernel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamKernel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNu ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamNu." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinking ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamShrinking." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneClassSVMMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:NeighborhoodComponentsAnalysisMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NeighborhoodComponentsAnalysisMethod ;

    sh:property [
        sh:path ml:hasParamCallback ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamCallback." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NeighborhoodComponentsAnalysisMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:HistGradientBoostingClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HistGradientBoostingClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCategoricalFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamCategoricalFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInteractionCst ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamInteractionCst." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL2Regularization ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamL2Regularization." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxBins ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxBins." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMonotonicCst ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMonotonicCst." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HistGradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:HistGradientBoostingRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HistGradientBoostingRegressorMethod ;

    sh:property [
        sh:path ml:hasParamCategoricalFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamCategoricalFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEarlyStopping ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamEarlyStopping." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInteractionCst ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamInteractionCst." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL2Regularization ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamL2Regularization." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxBins ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxBins." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMonotonicCst ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamMonotonicCst." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamQuantile ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamQuantile." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method HistGradientBoostingRegressorMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:OneHotEncoderMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OneHotEncoderMethod ;

    sh:property [
        sh:path ml:hasParamCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamCategories." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDrop ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamDrop." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDtype ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamDtype." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFeatureNameCombiner ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamFeatureNameCombiner." ;
    ] ;
    sh:property [
        sh:path ml:hasParamHandleUnknown ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamHandleUnknown." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamMaxCategories." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinFrequency ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamMinFrequency." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparseOutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OneHotEncoderMethod must have at most one compatible value for parameter hasParamSparseOutput." ;
    ] .

:OrdinalEncoderMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OrdinalEncoderMethod ;

    sh:property [
        sh:path ml:hasParamCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamCategories." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDtype ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamDtype." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEncodedMissingValue ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamEncodedMissingValue." ;
    ] ;
    sh:property [
        sh:path ml:hasParamHandleUnknown ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamHandleUnknown." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamMaxCategories." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinFrequency ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamMinFrequency." ;
    ] ;
    sh:property [
        sh:path ml:hasParamUnknownValue ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrdinalEncoderMethod must have at most one compatible value for parameter hasParamUnknownValue." ;
    ] .

:TargetEncoderMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TargetEncoderMethod ;

    sh:property [
        sh:path ml:hasParamCategories ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamCategories." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSmooth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamSmooth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTargetType ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TargetEncoderMethod must have at most one compatible value for parameter hasParamTargetType." ;
    ] .

:DecisionTreeClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DecisionTreeClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeClassifierMethod must have at most one compatible value for parameter hasParamSplitter." ;
    ] .

:DecisionTreeRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DecisionTreeRegressorMethod ;

    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DecisionTreeRegressorMethod must have at most one compatible value for parameter hasParamSplitter." ;
    ] .

:ExtraTreeClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ExtraTreeClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeClassifierMethod must have at most one compatible value for parameter hasParamSplitter." ;
    ] .

:ExtraTreeRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ExtraTreeRegressorMethod ;

    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExtraTreeRegressorMethod must have at most one compatible value for parameter hasParamSplitter." ;
    ] .

:GradientBoostingClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GradientBoostingClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCcpAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamCcpAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIterNoChange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamNIterNoChange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSubsample ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamSubsample." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamValidationFraction ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamValidationFraction." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method GradientBoostingClassifierMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:FRegressionMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FRegressionMethod ;

    sh:property [
        sh:path ml:hasParamCenter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FRegressionMethod must have at most one compatible value for parameter hasParamCenter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamForceFinite ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FRegressionMethod must have at most one compatible value for parameter hasParamForceFinite." ;
    ] .

:LogisticRegressionCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LogisticRegressionCVMethod ;

    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamCs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDual ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamDual." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInterceptScaling ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamInterceptScaling." ;
    ] ;
    sh:property [
        sh:path ml:hasParamL1Ratios ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamL1Ratios." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultiClass ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamMultiClass." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPenalty ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamPenalty." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamRefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogisticRegressionCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:RidgeClassifierCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RidgeClassifierCVMethod ;

    sh:property [
        sh:path ml:hasParamClassWeight ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierCVMethod must have at most one compatible value for parameter hasParamClassWeight." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeClassifierCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RidgeClassifierCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStoreCvValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RidgeClassifierCVMethod must have at most one compatible value for parameter hasParamStoreCvValues." ;
    ] .

:MinMaxScalerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MinMaxScalerMethod ;

    sh:property [
        sh:path ml:hasParamClip ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MinMaxScalerMethod must have at most one compatible value for parameter hasParamClip." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MinMaxScalerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFeatureRange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MinMaxScalerMethod must have at most one compatible value for parameter hasParamFeatureRange." ;
    ] .

:OutputCodeClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OutputCodeClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCodeSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OutputCodeClassifierMethod must have at most one compatible value for parameter hasParamCodeSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OutputCodeClassifierMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OutputCodeClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OutputCodeClassifierMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:AgglomerativeClusteringMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AgglomerativeClusteringMethod ;

    sh:property [
        sh:path ml:hasParamComputeDistances ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamComputeDistances." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeFullTree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamComputeFullTree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamConnectivity ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamConnectivity." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDistanceThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamDistanceThreshold." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLinkage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamLinkage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMemory ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamMemory." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AgglomerativeClusteringMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] .

:FeatureAgglomerationMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FeatureAgglomerationMethod ;

    sh:property [
        sh:path ml:hasParamComputeDistances ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamComputeDistances." ;
    ] ;
    sh:property [
        sh:path ml:hasParamComputeFullTree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamComputeFullTree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamConnectivity ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamConnectivity." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDistanceThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamDistanceThreshold." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLinkage ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamLinkage." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMemory ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamMemory." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPoolingFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FeatureAgglomerationMethod must have at most one compatible value for parameter hasParamPoolingFunc." ;
    ] .

:MutualInfoScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MutualInfoScoreMethod ;

    sh:property [
        sh:path ml:hasParamContingency ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MutualInfoScoreMethod must have at most one compatible value for parameter hasParamContingency." ;
    ] .

:BinarizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BinarizerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method BinarizerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BinarizerMethod must have at most one compatible value for parameter hasParamThreshold." ;
    ] .

:FactorAnalysisMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FactorAnalysisMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIteratedPower ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamIteratedPower." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRotation ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamRotation." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSvdMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamSvdMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method FactorAnalysisMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:MaxAbsScalerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MaxAbsScalerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MaxAbsScalerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] .

:MutualInfoClassifMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MutualInfoClassifMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MutualInfoClassifMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDiscreteFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MutualInfoClassifMethod must have at most one compatible value for parameter hasParamDiscreteFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MutualInfoClassifMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MutualInfoClassifMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:MutualInfoRegressionMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MutualInfoRegressionMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MutualInfoRegressionMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDiscreteFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MutualInfoRegressionMethod must have at most one compatible value for parameter hasParamDiscreteFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNeighbors ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MutualInfoRegressionMethod must have at most one compatible value for parameter hasParamNNeighbors." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MutualInfoRegressionMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:NanEuclideanDistancesMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NanEuclideanDistancesMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NanEuclideanDistancesMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMissingValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NanEuclideanDistancesMethod must have at most one compatible value for parameter hasParamMissingValues." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSquared ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NanEuclideanDistancesMethod must have at most one compatible value for parameter hasParamSquared." ;
    ] .

:NormalizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NormalizerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NormalizerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNorm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NormalizerMethod must have at most one compatible value for parameter hasParamNorm." ;
    ] .

:OrthogonalMatchingPursuitCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OrthogonalMatchingPursuitCVMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:PCAMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PCAMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIteratedPower ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamIteratedPower." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNOversamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamNOversamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPowerIterationNormalizer ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamPowerIterationNormalizer." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSvdSolver ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamSvdSolver." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWhiten ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PCAMethod must have at most one compatible value for parameter hasParamWhiten." ;
    ] .

:PowerTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PowerTransformerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PowerTransformerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PowerTransformerMethod must have at most one compatible value for parameter hasParamMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStandardize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PowerTransformerMethod must have at most one compatible value for parameter hasParamStandardize." ;
    ] .

:QuantileTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:QuantileTransformerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIgnoreImplicitZeros ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamIgnoreImplicitZeros." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNQuantiles ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamNQuantiles." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOutputDistribution ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamOutputDistribution." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSubsample ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method QuantileTransformerMethod must have at most one compatible value for parameter hasParamSubsample." ;
    ] .

:RobustScalerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RobustScalerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RobustScalerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamQuantileRange ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RobustScalerMethod must have at most one compatible value for parameter hasParamQuantileRange." ;
    ] ;
    sh:property [
        sh:path ml:hasParamUnitVariance ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RobustScalerMethod must have at most one compatible value for parameter hasParamUnitVariance." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWithCentering ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RobustScalerMethod must have at most one compatible value for parameter hasParamWithCentering." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWithScaling ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RobustScalerMethod must have at most one compatible value for parameter hasParamWithScaling." ;
    ] .

:StandardScalerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StandardScalerMethod ;

    sh:property [
        sh:path ml:hasParamCopy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StandardScalerMethod must have at most one compatible value for parameter hasParamCopy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWithMean ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StandardScalerMethod must have at most one compatible value for parameter hasParamWithMean." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWithStd ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StandardScalerMethod must have at most one compatible value for parameter hasParamWithStd." ;
    ] .

:LarsCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LarsCVMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamMaxNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LarsMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LarsMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitPath ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamFitPath." ;
    ] ;
    sh:property [
        sh:path ml:hasParamJitter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamJitter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNonzeroCoefs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamNNonzeroCoefs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LarsMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LassoLarsCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LassoLarsCVMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxNAlphas ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamMaxNAlphas." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LassoLarsICMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LassoLarsICMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamCriterion ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamCriterion." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNoiseVariance ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamNoiseVariance." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LassoLarsICMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:LinearRegressionMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LinearRegressionMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearRegressionMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearRegressionMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LinearRegressionMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositive ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LinearRegressionMethod must have at most one compatible value for parameter hasParamPositive." ;
    ] .

:TheilSenRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TheilSenRegressorMethod ;

    sh:property [
        sh:path ml:hasParamCopyX ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamCopyX." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSubpopulation ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamMaxSubpopulation." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSubsamples ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamNSubsamples." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TheilSenRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:GridSearchCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GridSearchCVMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamErrorScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamErrorScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamParamGrid ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamParamGrid." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPreDispatch ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamPreDispatch." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamRefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReturnTrainScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamReturnTrainScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GridSearchCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:RFECVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RFECVMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamImportanceGetter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamImportanceGetter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinFeaturesToSelect ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamMinFeaturesToSelect." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStep ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamStep." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFECVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:RandomizedSearchCVMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RandomizedSearchCVMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamErrorScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamErrorScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamNIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamParamDistributions ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamParamDistributions." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPreDispatch ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamPreDispatch." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamRefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReturnTrainScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamReturnTrainScore." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomizedSearchCVMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:SequentialFeatureSelectorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SequentialFeatureSelectorMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamDirection ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamDirection." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNFeaturesToSelect ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamNFeaturesToSelect." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SequentialFeatureSelectorMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:StackingClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StackingClassifierMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFinalEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamFinalEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPassthrough ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamPassthrough." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStackMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamStackMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StackingClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:StackingRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StackingRegressorMethod ;

    sh:property [
        sh:path ml:hasParamCv ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamCv." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFinalEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamFinalEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPassthrough ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamPassthrough." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StackingRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:PolynomialFeaturesMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PolynomialFeaturesMethod ;

    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PolynomialFeaturesMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIncludeBias ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PolynomialFeaturesMethod must have at most one compatible value for parameter hasParamIncludeBias." ;
    ] ;
    sh:property [
        sh:path ml:hasParamInteractionOnly ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PolynomialFeaturesMethod must have at most one compatible value for parameter hasParamInteractionOnly." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOrder ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PolynomialFeaturesMethod must have at most one compatible value for parameter hasParamOrder." ;
    ] .

:SplineTransformerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SplineTransformerMethod ;

    sh:property [
        sh:path ml:hasParamDegree ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamDegree." ;
    ] ;
    sh:property [
        sh:path ml:hasParamExtrapolation ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamExtrapolation." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIncludeBias ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamIncludeBias." ;
    ] ;
    sh:property [
        sh:path ml:hasParamKnots ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamKnots." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNKnots ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamNKnots." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOrder ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamOrder." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparseOutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SplineTransformerMethod must have at most one compatible value for parameter hasParamSparseOutput." ;
    ] .

:SparseCoderMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SparseCoderMethod ;

    sh:property [
        sh:path ml:hasParamDictionary ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamDictionary." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPositiveCode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamPositiveCode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSplitSign ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamSplitSign." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlgorithm ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamTransformAlgorithm." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformAlpha ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamTransformAlpha." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformMaxIter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamTransformMaxIter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTransformNNonzeroCoefs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SparseCoderMethod must have at most one compatible value for parameter hasParamTransformNNonzeroCoefs." ;
    ] .

:ClassificationReportMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ClassificationReportMethod ;

    sh:property [
        sh:path ml:hasParamDigits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ClassificationReportMethod must have at most one compatible value for parameter hasParamDigits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamOutputDict ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ClassificationReportMethod must have at most one compatible value for parameter hasParamOutputDict." ;
    ] ;
    sh:property [
        sh:path ml:hasParamZeroDivision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ClassificationReportMethod must have at most one compatible value for parameter hasParamZeroDivision." ;
    ] .

:PrecisionRecallCurveMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PrecisionRecallCurveMethod ;

    sh:property [
        sh:path ml:hasParamDropIntermediate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PrecisionRecallCurveMethod must have at most one compatible value for parameter hasParamDropIntermediate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PrecisionRecallCurveMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] .

:RocCurveMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RocCurveMethod ;

    sh:property [
        sh:path ml:hasParamDropIntermediate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RocCurveMethod must have at most one compatible value for parameter hasParamDropIntermediate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RocCurveMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] .

:DictVectorizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DictVectorizerMethod ;

    sh:property [
        sh:path ml:hasParamDtype ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictVectorizerMethod must have at most one compatible value for parameter hasParamDtype." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSeparator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DictVectorizerMethod must have at most one compatible value for parameter hasParamSeparator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSort ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DictVectorizerMethod must have at most one compatible value for parameter hasParamSort." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparse ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DictVectorizerMethod must have at most one compatible value for parameter hasParamSparse." ;
    ] .

:KBinsDiscretizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KBinsDiscretizerMethod ;

    sh:property [
        sh:path ml:hasParamDtype ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamDtype." ;
    ] ;
    sh:property [
        sh:path ml:hasParamEncode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamEncode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNBins ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamNBins." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStrategy ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamStrategy." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSubsample ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KBinsDiscretizerMethod must have at most one compatible value for parameter hasParamSubsample." ;
    ] .

:LogLossMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LogLossMethod ;

    sh:property [
        sh:path ml:hasParamEps ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LogLossMethod must have at most one compatible value for parameter hasParamEps." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNormalize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LogLossMethod must have at most one compatible value for parameter hasParamNormalize." ;
    ] .

:MissingIndicatorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MissingIndicatorMethod ;

    sh:property [
        sh:path ml:hasParamErrorOnNew ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MissingIndicatorMethod must have at most one compatible value for parameter hasParamErrorOnNew." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MissingIndicatorMethod must have at most one compatible value for parameter hasParamFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMissingValues ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MissingIndicatorMethod must have at most one compatible value for parameter hasParamMissingValues." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparse ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MissingIndicatorMethod must have at most one compatible value for parameter hasParamSparse." ;
    ] .

:AdaBoostRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AdaBoostRegressorMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostRegressorMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLearningRate ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostRegressorMethod must have at most one compatible value for parameter hasParamLearningRate." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method AdaBoostRegressorMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AdaBoostRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:OneVsOneClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OneVsOneClassifierMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneVsOneClassifierMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneVsOneClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] .

:OneVsRestClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OneVsRestClassifierMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneVsRestClassifierMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OneVsRestClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OneVsRestClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:RANSACRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RANSACRegressorMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIsDataValid ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamIsDataValid." ;
    ] ;
    sh:property [
        sh:path ml:hasParamIsModelValid ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamIsModelValid." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLoss ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamLoss." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxSkips ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamMaxSkips." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxTrials ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamMaxTrials." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamResidualThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamResidualThreshold." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStopNInliers ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamStopNInliers." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStopScore ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RANSACRegressorMethod must have at most one compatible value for parameter hasParamStopScore." ;
    ] .

:RFEMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RFEMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFEMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamImportanceGetter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RFEMethod must have at most one compatible value for parameter hasParamImportanceGetter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNFeaturesToSelect ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFEMethod must have at most one compatible value for parameter hasParamNFeaturesToSelect." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStep ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFEMethod must have at most one compatible value for parameter hasParamStep." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RFEMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:SelectFromModelMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectFromModelMethod ;

    sh:property [
        sh:path ml:hasParamEstimator ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamEstimator." ;
    ] ;
    sh:property [
        sh:path ml:hasParamImportanceGetter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamImportanceGetter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxFeatures ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamMaxFeatures." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNormOrder ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamNormOrder." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrefit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamPrefit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectFromModelMethod must have at most one compatible value for parameter hasParamThreshold." ;
    ] .

:VotingClassifierMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:VotingClassifierMethod ;

    sh:property [
        sh:path ml:hasParamEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VotingClassifierMethod must have at most one compatible value for parameter hasParamEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamFlattenTransform ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method VotingClassifierMethod must have at most one compatible value for parameter hasParamFlattenTransform." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VotingClassifierMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method VotingClassifierMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVoting ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VotingClassifierMethod must have at most one compatible value for parameter hasParamVoting." ;
    ] .

:VotingRegressorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:VotingRegressorMethod ;

    sh:property [
        sh:path ml:hasParamEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VotingRegressorMethod must have at most one compatible value for parameter hasParamEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VotingRegressorMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method VotingRegressorMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] .

:PairwiseKernelsMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PairwiseKernelsMethod ;

    sh:property [
        sh:path ml:hasParamFilterParams ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PairwiseKernelsMethod must have at most one compatible value for parameter hasParamFilterParams." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseKernelsMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseKernelsMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] .

:OrthogonalMatchingPursuitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:OrthogonalMatchingPursuitMethod ;

    sh:property [
        sh:path ml:hasParamFitIntercept ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitMethod must have at most one compatible value for parameter hasParamFitIntercept." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNNonzeroCoefs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitMethod must have at most one compatible value for parameter hasParamNNonzeroCoefs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPrecompute ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitMethod must have at most one compatible value for parameter hasParamPrecompute." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTol ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method OrthogonalMatchingPursuitMethod must have at most one compatible value for parameter hasParamTol." ;
    ] .

:PairwiseDistancesMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PairwiseDistancesMethod ;

    sh:property [
        sh:path ml:hasParamForceAllFinite ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method PairwiseDistancesMethod must have at most one compatible value for parameter hasParamForceAllFinite." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] .

:ExplainedVarianceScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ExplainedVarianceScoreMethod ;

    sh:property [
        sh:path ml:hasParamForceFinite ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ExplainedVarianceScoreMethod must have at most one compatible value for parameter hasParamForceFinite." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ExplainedVarianceScoreMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:R2ScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:R2ScoreMethod ;

    sh:property [
        sh:path ml:hasParamForceFinite ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method R2ScoreMethod must have at most one compatible value for parameter hasParamForceFinite." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method R2ScoreMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:TimeSeriesSplitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TimeSeriesSplitMethod ;

    sh:property [
        sh:path ml:hasParamGap ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TimeSeriesSplitMethod must have at most one compatible value for parameter hasParamGap." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxTrainSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TimeSeriesSplitMethod must have at most one compatible value for parameter hasParamMaxTrainSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TimeSeriesSplitMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TimeSeriesSplitMethod must have at most one compatible value for parameter hasParamTestSize." ;
    ] .

:MakeScorerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MakeScorerMethod ;

    sh:property [
        sh:path ml:hasParamGreaterIsBetter ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MakeScorerMethod must have at most one compatible value for parameter hasParamGreaterIsBetter." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNeedsProba ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MakeScorerMethod must have at most one compatible value for parameter hasParamNeedsProba." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNeedsThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MakeScorerMethod must have at most one compatible value for parameter hasParamNeedsThreshold." ;
    ] ;
    sh:property [
        sh:path ml:hasParamResponseMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MakeScorerMethod must have at most one compatible value for parameter hasParamResponseMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MakeScorerMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:DcgScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DcgScoreMethod ;

    sh:property [
        sh:path ml:hasParamIgnoreTies ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method DcgScoreMethod must have at most one compatible value for parameter hasParamIgnoreTies." ;
    ] ;
    sh:property [
        sh:path ml:hasParamK ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DcgScoreMethod must have at most one compatible value for parameter hasParamK." ;
    ] ;
    sh:property [
        sh:path ml:hasParamLogBase ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method DcgScoreMethod must have at most one compatible value for parameter hasParamLogBase." ;
    ] .

:NdcgScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NdcgScoreMethod ;

    sh:property [
        sh:path ml:hasParamIgnoreTies ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method NdcgScoreMethod must have at most one compatible value for parameter hasParamIgnoreTies." ;
    ] ;
    sh:property [
        sh:path ml:hasParamK ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NdcgScoreMethod must have at most one compatible value for parameter hasParamK." ;
    ] .

:SpectralBiclusteringMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SpectralBiclusteringMethod ;

    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamMethod." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMiniBatch ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamMiniBatch." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNBest ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamNBest." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNComponents ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamNComponents." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSvdVecs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamNSvdVecs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSvdMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralBiclusteringMethod must have at most one compatible value for parameter hasParamSvdMethod." ;
    ] .

:SpectralCoclusteringMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SpectralCoclusteringMethod ;

    sh:property [
        sh:path ml:hasParamInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMiniBatch ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamMiniBatch." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNClusters ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamNClusters." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNInit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamNInit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSvdVecs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamNSvdVecs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSvdMethod ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SpectralCoclusteringMethod must have at most one compatible value for parameter hasParamSvdMethod." ;
    ] .

:SelectKBestMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectKBestMethod ;

    sh:property [
        sh:path ml:hasParamK ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SelectKBestMethod must have at most one compatible value for parameter hasParamK." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectKBestMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:TopKAccuracyScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TopKAccuracyScoreMethod ;

    sh:property [
        sh:path ml:hasParamK ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TopKAccuracyScoreMethod must have at most one compatible value for parameter hasParamK." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNormalize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TopKAccuracyScoreMethod must have at most one compatible value for parameter hasParamNormalize." ;
    ] .

:RandomTreesEmbeddingMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RandomTreesEmbeddingMethod ;

    sh:property [
        sh:path ml:hasParamMaxDepth ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMaxDepth." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMaxLeafNodes ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMaxLeafNodes." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinImpurityDecrease ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMinImpurityDecrease." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMinSamplesLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinSamplesSplit ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMinSamplesSplit." ;
    ] ;
    sh:property [
        sh:path ml:hasParamMinWeightFractionLeaf ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamMinWeightFractionLeaf." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNEstimators ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamNEstimators." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparseOutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamSparseOutput." ;
    ] ;
    sh:property [
        sh:path ml:hasParamVerbose ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamVerbose." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWarmStart ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method RandomTreesEmbeddingMethod must have at most one compatible value for parameter hasParamWarmStart." ;
    ] .

:NearestCentroidMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:NearestCentroidMethod ;

    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method NearestCentroidMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShrinkThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method NearestCentroidMethod must have at most one compatible value for parameter hasParamShrinkThreshold." ;
    ] .

:PairwiseDistancesChunkedMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:PairwiseDistancesChunkedMethod ;

    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesChunkedMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNJobs ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesChunkedMethod must have at most one compatible value for parameter hasParamNJobs." ;
    ] ;
    sh:property [
        sh:path ml:hasParamReduceFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method PairwiseDistancesChunkedMethod must have at most one compatible value for parameter hasParamReduceFunc." ;
    ] ;
    sh:property [
        sh:path ml:hasParamWorkingMemory ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method PairwiseDistancesChunkedMethod must have at most one compatible value for parameter hasParamWorkingMemory." ;
    ] .

:SilhouetteSamplesMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SilhouetteSamplesMethod ;

    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SilhouetteSamplesMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] .

:SilhouetteScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SilhouetteScoreMethod ;

    sh:property [
        sh:path ml:hasParamMetric ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SilhouetteScoreMethod must have at most one compatible value for parameter hasParamMetric." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SilhouetteScoreMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSampleSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SilhouetteScoreMethod must have at most one compatible value for parameter hasParamSampleSize." ;
    ] .

:GenericUnivariateSelectMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GenericUnivariateSelectMethod ;

    sh:property [
        sh:path ml:hasParamMode ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GenericUnivariateSelectMethod must have at most one compatible value for parameter hasParamMode." ;
    ] ;
    sh:property [
        sh:path ml:hasParamParam ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GenericUnivariateSelectMethod must have at most one compatible value for parameter hasParamParam." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GenericUnivariateSelectMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:D2AbsoluteErrorScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:D2AbsoluteErrorScoreMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method D2AbsoluteErrorScoreMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:MeanAbsoluteErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanAbsoluteErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanAbsoluteErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:MeanAbsolutePercentageErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanAbsolutePercentageErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanAbsolutePercentageErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:MeanSquaredErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanSquaredErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanSquaredErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSquared ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MeanSquaredErrorMethod must have at most one compatible value for parameter hasParamSquared." ;
    ] .

:MeanSquaredLogErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanSquaredLogErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MeanSquaredLogErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSquared ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MeanSquaredLogErrorMethod must have at most one compatible value for parameter hasParamSquared." ;
    ] .

:MedianAbsoluteErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MedianAbsoluteErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method MedianAbsoluteErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:RootMeanSquaredErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RootMeanSquaredErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RootMeanSquaredErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:RootMeanSquaredLogErrorMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RootMeanSquaredLogErrorMethod ;

    sh:property [
        sh:path ml:hasParamMultioutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RootMeanSquaredLogErrorMethod must have at most one compatible value for parameter hasParamMultioutput." ;
    ] .

:LeavePGroupsOutMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LeavePGroupsOutMethod ;

    sh:property [
        sh:path ml:hasParamNGroups ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LeavePGroupsOutMethod must have at most one compatible value for parameter hasParamNGroups." ;
    ] .

:RepeatedKFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RepeatedKFoldMethod ;

    sh:property [
        sh:path ml:hasParamNRepeats ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RepeatedKFoldMethod must have at most one compatible value for parameter hasParamNRepeats." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RepeatedKFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RepeatedKFoldMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:RepeatedStratifiedKFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:RepeatedStratifiedKFoldMethod ;

    sh:property [
        sh:path ml:hasParamNRepeats ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RepeatedStratifiedKFoldMethod must have at most one compatible value for parameter hasParamNRepeats." ;
    ] ;
    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method RepeatedStratifiedKFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method RepeatedStratifiedKFoldMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] .

:GroupKFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GroupKFoldMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GroupKFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] .

:GroupShuffleSplitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GroupShuffleSplitMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GroupShuffleSplitMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GroupShuffleSplitMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GroupShuffleSplitMethod must have at most one compatible value for parameter hasParamTestSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GroupShuffleSplitMethod must have at most one compatible value for parameter hasParamTrainSize." ;
    ] .

:KFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:KFoldMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method KFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method KFoldMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method KFoldMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] .

:ShuffleSplitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ShuffleSplitMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ShuffleSplitMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ShuffleSplitMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ShuffleSplitMethod must have at most one compatible value for parameter hasParamTestSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method ShuffleSplitMethod must have at most one compatible value for parameter hasParamTrainSize." ;
    ] .

:StratifiedGroupKFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StratifiedGroupKFoldMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StratifiedGroupKFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StratifiedGroupKFoldMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StratifiedGroupKFoldMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] .

:StratifiedKFoldMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StratifiedKFoldMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StratifiedKFoldMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StratifiedKFoldMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method StratifiedKFoldMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] .

:StratifiedShuffleSplitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:StratifiedShuffleSplitMethod ;

    sh:property [
        sh:path ml:hasParamNSplits ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StratifiedShuffleSplitMethod must have at most one compatible value for parameter hasParamNSplits." ;
    ] ;
    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method StratifiedShuffleSplitMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StratifiedShuffleSplitMethod must have at most one compatible value for parameter hasParamTestSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method StratifiedShuffleSplitMethod must have at most one compatible value for parameter hasParamTrainSize." ;
    ] .

:LabelBinarizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LabelBinarizerMethod ;

    sh:property [
        sh:path ml:hasParamNegLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LabelBinarizerMethod must have at most one compatible value for parameter hasParamNegLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LabelBinarizerMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] ;
    sh:property [
        sh:path ml:hasParamSparseOutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method LabelBinarizerMethod must have at most one compatible value for parameter hasParamSparseOutput." ;
    ] .

:AccuracyScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:AccuracyScoreMethod ;

    sh:property [
        sh:path ml:hasParamNormalize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method AccuracyScoreMethod must have at most one compatible value for parameter hasParamNormalize." ;
    ] .

:ConfusionMatrixMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ConfusionMatrixMethod ;

    sh:property [
        sh:path ml:hasParamNormalize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ConfusionMatrixMethod must have at most one compatible value for parameter hasParamNormalize." ;
    ] .

:ZeroOneLossMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ZeroOneLossMethod ;

    sh:property [
        sh:path ml:hasParamNormalize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ZeroOneLossMethod must have at most one compatible value for parameter hasParamNormalize." ;
    ] .

:LeavePOutMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LeavePOutMethod ;

    sh:property [
        sh:path ml:hasParamP ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method LeavePOutMethod must have at most one compatible value for parameter hasParamP." ;
    ] .

:ValidationCurveDisplayMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ValidationCurveDisplayMethod ;

    sh:property [
        sh:path ml:hasParamParamName ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ValidationCurveDisplayMethod must have at most one compatible value for parameter hasParamParamName." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreName ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ValidationCurveDisplayMethod must have at most one compatible value for parameter hasParamScoreName." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestScores ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ValidationCurveDisplayMethod must have at most one compatible value for parameter hasParamTestScores." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainScores ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method ValidationCurveDisplayMethod must have at most one compatible value for parameter hasParamTrainScores." ;
    ] .

:SelectPercentileMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:SelectPercentileMethod ;

    sh:property [
        sh:path ml:hasParamPercentile ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method SelectPercentileMethod must have at most one compatible value for parameter hasParamPercentile." ;
    ] ;
    sh:property [
        sh:path ml:hasParamScoreFunc ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method SelectPercentileMethod must have at most one compatible value for parameter hasParamScoreFunc." ;
    ] .

:BrierScoreLossMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:BrierScoreLossMethod ;

    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method BrierScoreLossMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] .

:DetCurveMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:DetCurveMethod ;

    sh:property [
        sh:path ml:hasParamPosLabel ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method DetCurveMethod must have at most one compatible value for parameter hasParamPosLabel." ;
    ] .

:D2TweedieScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:D2TweedieScoreMethod ;

    sh:property [
        sh:path ml:hasParamPower ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method D2TweedieScoreMethod must have at most one compatible value for parameter hasParamPower." ;
    ] .

:MeanTweedieDevianceMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MeanTweedieDevianceMethod ;

    sh:property [
        sh:path ml:hasParamPower ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method MeanTweedieDevianceMethod must have at most one compatible value for parameter hasParamPower." ;
    ] .

:HingeLossMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:HingeLossMethod ;

    sh:property [
        sh:path ml:hasParamPredDecision ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method HingeLossMethod must have at most one compatible value for parameter hasParamPredDecision." ;
    ] .

:ClassLikelihoodRatiosMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:ClassLikelihoodRatiosMethod ;

    sh:property [
        sh:path ml:hasParamRaiseWarning ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method ClassLikelihoodRatiosMethod must have at most one compatible value for parameter hasParamRaiseWarning." ;
    ] .

:TrainTestSplitMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:TrainTestSplitMethod ;

    sh:property [
        sh:path ml:hasParamRandomState ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TrainTestSplitMethod must have at most one compatible value for parameter hasParamRandomState." ;
    ] ;
    sh:property [
        sh:path ml:hasParamShuffle ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method TrainTestSplitMethod must have at most one compatible value for parameter hasParamShuffle." ;
    ] ;
    sh:property [
        sh:path ml:hasParamStratify ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method TrainTestSplitMethod must have at most one compatible value for parameter hasParamStratify." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TrainTestSplitMethod must have at most one compatible value for parameter hasParamTestSize." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainSize ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method TrainTestSplitMethod must have at most one compatible value for parameter hasParamTrainSize." ;
    ] .

:MultilabelConfusionMatrixMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultilabelConfusionMatrixMethod ;

    sh:property [
        sh:path ml:hasParamSamplewise ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultilabelConfusionMatrixMethod must have at most one compatible value for parameter hasParamSamplewise." ;
    ] .

:LearningCurveDisplayMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:LearningCurveDisplayMethod ;

    sh:property [
        sh:path ml:hasParamScoreName ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LearningCurveDisplayMethod must have at most one compatible value for parameter hasParamScoreName." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTestScores ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LearningCurveDisplayMethod must have at most one compatible value for parameter hasParamTestScores." ;
    ] ;
    sh:property [
        sh:path ml:hasParamTrainScores ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method LearningCurveDisplayMethod must have at most one compatible value for parameter hasParamTrainScores." ;
    ] .

:GetScorerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GetScorerMethod ;

    sh:property [
        sh:path ml:hasParamScoring ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method GetScorerMethod must have at most one compatible value for parameter hasParamScoring." ;
    ] .

:FowlkesMallowsScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:FowlkesMallowsScoreMethod ;

    sh:property [
        sh:path ml:hasParamSparse ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method FowlkesMallowsScoreMethod must have at most one compatible value for parameter hasParamSparse." ;
    ] .

:MultiLabelBinarizerMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:MultiLabelBinarizerMethod ;

    sh:property [
        sh:path ml:hasParamSparseOutput ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method MultiLabelBinarizerMethod must have at most one compatible value for parameter hasParamSparseOutput." ;
    ] .

:EuclideanDistancesMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:EuclideanDistancesMethod ;

    sh:property [
        sh:path ml:hasParamSquared ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:boolean ]
        ) ;
        sh:message "Method EuclideanDistancesMethod must have at most one compatible value for parameter hasParamSquared." ;
    ] .

:VarianceThresholdMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:VarianceThresholdMethod ;

    sh:property [
        sh:path ml:hasParamThreshold ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method VarianceThresholdMethod must have at most one compatible value for parameter hasParamThreshold." ;
    ] .

:GaussianNBMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:GaussianNBMethod ;

    sh:property [
        sh:path ml:hasParamVarSmoothing ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:float ]
            [ sh:datatype xsd:int ]
        ) ;
        sh:message "Method GaussianNBMethod must have at most one compatible value for parameter hasParamVarSmoothing." ;
    ] .

:CohenKappaScoreMethodParameterShape a sh:NodeShape ;
    sh:targetClass ml:CohenKappaScoreMethod ;

    sh:property [
        sh:path ml:hasParamWeights ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:string ]
        ) ;
        sh:message "Method CohenKappaScoreMethod must have at most one compatible value for parameter hasParamWeights." ;
    ] .
